--
-- Copyright 2010 jccastrejon, rosatzimba
--  
-- This file is part of Model2Roo.
--
-- Model2Roo is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- Model2Roo is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with Model2Roo.  If not, see <http://www.gnu.org/licenses/>.
--
library Annotation;

-- Default properties
helper context String def: getDefaultProperties(): Map(String, String) = Map{
	('topLevelPackage', 'com.model2roo'),
	('persistenceProvider', 'HIBERNATE'),
	('persistenceDatabase', 'HYPERSONIC_IN_MEMORY'),
	('controllersAll', '--package ~.web')
}.get(self); 

-- Properties - profiles mapping
helper context String def: getMapping(): Map(String, String) = Map{
	('controllersAll', 'web mvc all'),
	('persistenceProvider', '--provider'),
	('persistenceDatabase', '--database'),
	('persistenceApplicationId', '--applicationId'),
	('persistenceJndiDataSource', '--jndiDataSource'),
	('persistenceDatabaseName', '--databaseName'),
	('persistenceUserName', '--userName'),
	('persistencePassword', '--password'),
	('seleniumTest', 'selenium test --controller'),
	('seleniumName', '--name'),
	('seleniumServerUrl', '--serverUrl'),
	('finders', 'finder add --finderName ')
}.get(self);

-- Context for properties
helper def: contextMapping: Map(String, String) = Map{
	('seleniumTest', '~.web.<entity>Controller'),
	('finders', '--class ~.domain.<entity>'),
	('controllersAll', '--package ~.web')
};

helper def: groups : Set(String) = Set{
	'finders',
	'controller',
	'selenium',
	'dod',
	'testMock',
	'testIntegration'
};
	
-- Roo details
helper context Ecore!EAnnotation def: getRooDetails(): String =
	if self.source.startsWith('rooStructure:') then
		self.details
			-> iterate(
				detail; acc: String = ' ' | 
				
				if detail.value.trim().size() > 0 then 
					acc + '--' + detail.key + ' ' +
					
					if detail.value <> 'true' then
						detail.value
					else
						''
					endif
						+ ' '
				else
					if detail.key.getDefaultProperties() <> OclUndefined then
						acc + '--' + detail.key + ' ' + detail.key.getDefaultProperties() + ' '
					else
						acc + ''
					endif
				endif)
	else
		''
	endif;

helper context Ecore!EAnnotation def: getModelCommand(prefix : String, entity: String): String =
	if self.source.startsWith('rooCommand:') then
		self.details -> select(detail | detail.key.startsWith(prefix))
			-> iterate(
				detail; acc: String = '' | 				
					acc +
					--'evaluating: ' + detail.key + ': ' + detail.value + ':' + detail.key.getMapping() + '\n' +
					if not detail.key.getMapping().oclIsUndefined() then
						-- Annotation without value
						if detail.value.trim().size() = 0 then
							if not detail.key.getDefaultProperties().oclIsUndefined() then
								detail.key.getMapping() + ' ' + detail.key.getDefaultProperties()
							else ''
							endif
						
						-- Annotation with user-specified value
						else
							if detail.value.indexOf(',') > 0 then
							-- Multiple values
								acc + detail.value.split(',') ->
									iterate(value; accValue: String = '' | 
										accValue + detail.key.getMapping() + ' ' + value.trim() + ' ' +
										
										-- Context
										if not thisModule.contextMapping.get(detail.key).oclIsUndefined() then
											thisModule.contextMapping.get(detail.key).regexReplaceAll('<entity>', entity)
										else ''
										endif
										
										+ '\n')
						
							else
							-- Single value
								detail.key.getMapping() + ' ' +
							
								if detail.value <> 'true' then
									detail.value
								else ''
								endif + ' ' +
								
								-- Context
								if not thisModule.contextMapping.get(detail.key).oclIsUndefined() then
									thisModule.contextMapping.get(detail.key).regexReplaceAll('<entity>', entity)
								else ''
								endif
							endif
							
						endif
						
						+ ' '
						
					else
						if detail.key.getDefaultProperties() <> OclUndefined then
							detail.key.getMapping()  + ' ' + detail.key.getDefaultProperties() + ' '
						else
						    ''
						endif
					endif) + '\n'
	else
		''
	endif;

helper context Ecore!EAnnotation def: getModelCommands(entity: String): String =
	thisModule.groups -> iterate(prefix; acc : String = '' | acc + self.getModelCommand(prefix, entity));
